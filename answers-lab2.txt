Questions 1.
Assuming that the following JOS kernel code is correct, what type should variable x have, uintptr_t or physaddr_t?

    mystery_t x ;
    char* value = return_a_pointer();
    *value = 10 ;
    x = (mystery_t) value ;

uintptr_t it is ! Since value must be a pointer pointing at "kernel vertual address",
so is the x with the assignment in the line 4.




Questions 2.
What entries (rows) in the page directory have been filled in at this point? What addresses do they map and where do they point? In other words, fill out this table as much as possible:

these maps the physical address of the page table.

kern_pgdir[   0]> 0xf011a000: 00000000
kern_pgdir[   1]> 0xf011a004: 00000000
kern_pgdir[   2]> 0xf011a008: 00000000
kern_pgdir[   3]> 0xf011a00c: 00000000
kern_pgdir[   4]> 0xf011a010: 00000000
kern_pgdir[   5]> 0xf011a014: 00000000
kern_pgdir[   6]> 0xf011a018: 00000000
kern_pgdir[   7]> 0xf011a01c: 00000000
kern_pgdir[   8]> 0xf011a020: 00000000
kern_pgdir[   9]> 0xf011a024: 00000000
kern_pgdir[  10]> 0xf011a028: 00000000
....
kern_pgdir[ 949]> 0xf011aed4: 00000000
kern_pgdir[ 950]> 0xf011aed8: 00000000
kern_pgdir[ 951]> 0xf011aedc: 00000000
kern_pgdir[ 952]> 0xf011aee0: 00000000
kern_pgdir[ 953]> 0xf011aee4: 00000000
kern_pgdir[ 954]> 0xf011aee8: 00000000
kern_pgdir[ 955]> 0xf011aeec: 00000000
kern_pgdir[ 956]> 0xf011aef0: 003fd007 << highlight
kern_pgdir[ 957]> 0xf011aef4: 0011a005 << highlight
...
kern_pgdir[1019]> 0xf011afec: 00000000
kern_pgdir[1020]> 0xf011aff0: 00000000
kern_pgdir[1021]> 0xf011aff4: 00000000
kern_pgdir[1022]> 0xf011aff8: 00000000
kern_pgdir[1023]> 0xf011affc: 00000000


Question 3.
We have placed the kernel and user environment in the same address space. Why will user programs not be able to read or write the kernelâ€™s memory? What specific mechanisms protect the kernel memory?

Because we setup the permission in the lower bits of page table entry, which specifies unable to read/write for users.
Specifically, zero the PTE_U makes the page inaccessible by the users.

Question 4.
What is the maximum amount of physical memory that this operating system can support? Why?

It can support 256MB . 0xffffffff - 0xf0000000


Question 5.
How much space overhead is there for managing memory, if we actually had the maximum amount of physical memory? How is this overhead broken down?

if we had the maximum physical memory, 256MB, the overhead would be due to the sturcture of PageInfo for reference counting, which, in this case, would be 512 MB.

Question 6.
Revisit the page table setup in kern/entry.S and kern/entrypgdir.c. Immediately after we turn on paging, EIP is still a low number (a little over 1MB). At what point do we transition to running at an EIP above KERNBASE? What makes it possible for us to continue executing at a low EIP between when we enable paging and when we begin running at an EIP above KERNBASE? Why is this transition necessary?


At the point we load cr0 with some values and enter the section <relocation> , EIP starts running above KERNBASE.
There are a few bytes mapped at the exact address of physical address and virtual address, which makes it possible to
executing at a low EIP.
